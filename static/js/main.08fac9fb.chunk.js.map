{"version":3,"sources":["components/TOC.js","components/ReadContent.js","components/CreateContent.js","components/UpdateContent.js","components/Subject.js","components/Control.js","App.js","serviceWorker.js","index.js"],"names":["TOC","newProps","newState","data","this","props","console","log","i","list","length","push","key","id","href","onClick","e","preventDefault","onChangePage","bind","title","Component","ReadContent","desc","CreateContent","action","method","onSubmit","target","value","type","name","placeholder","UpdateContent","state","inputFormHandler","setState","onChange","Subject","sub","Control","className","onChangeMode","App","max_content_id","mode","subject","welcome","selected_content_id","contents","_title","_desc","_article","_content","getReadContent","_contents","Array","from","_id","Number","_mode","window","confirm","splice","alert","getContent","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.08fac9fb.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nclass TOC extends Component {\r\n    shouldComponentUpdate(newProps, newState){\r\n        if(newProps.data === this.props.data){\r\n            return false\r\n        }\r\n        console.log(\"shouldUpdateComponent toc\")\r\n        return true\r\n    }\r\n    render() {\r\n        console.log(\"render toc\")\r\n        let list = [];\r\n        const data = this.props.data;\r\n        let i;\r\n        for(i = 0; i < data.length; i++){\r\n            list.push(\r\n            <li key={data[i].id}>\r\n                <a\r\n                  // data-id={data[i].id} \r\n                  href={\"/contents\"+ data[i].id}\r\n                  onClick={function(id, e){\r\n                    e.preventDefault();\r\n                    this.props.onChangePage(id);\r\n                  }.bind(this, data[i].id)}\r\n                >{data[i].title}</a>\r\n            </li>\r\n            )\r\n        }\r\n\r\n      return(\r\n        <nav>\r\n          <ul>\r\n            {list}\r\n          </ul>\r\n        </nav>\r\n      )\r\n    }\r\n  }\r\n\r\n  export default TOC;","import React, {Component} from 'react';\r\n\r\nclass ReadContent extends Component {\r\n    render() {\r\n      return(\r\n        <article>\r\n          <h2>{this.props.title}</h2>\r\n          <p>{this.props.desc}</p>\r\n        </article>\r\n      )\r\n    }\r\n  }\r\n\r\n  export default ReadContent;","import React, { Component } from 'react';\r\n\r\nclass CreateContent extends Component {\r\n    render(){\r\n        return(\r\n            <article>\r\n                <h2>Create</h2>\r\n                <form \r\n                    action=\"/create_process\"\r\n                    method=\"post\"\r\n                    onSubmit={function(e){\r\n                     e.preventDefault();\r\n                     this.props.onSubmit(\r\n                        e.target.title.value,\r\n                        e.target.desc.value\r\n                     )\r\n                    }.bind(this)}\r\n                >\r\n                    <p>\r\n                        <input type=\"text\" name=\"title\" placeholder=\"title\"></input>\r\n                    </p>\r\n                    <p>\r\n                        <textarea name=\"desc\" placeholder=\"description\"></textarea>\r\n                    </p>\r\n                    <p>\r\n                        <input type=\"submit\" value=\"submit\"></input>\r\n                    </p>\r\n                </form>\r\n            </article>\r\n        )\r\n    }\r\n}\r\n\r\nexport default CreateContent;","import React, { Component } from 'react';\r\n\r\nclass UpdateContent extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            title: this.props.data.title,\r\n            desc: this.props.data.desc,\r\n            id: this.props.data.id\r\n        }\r\n        this.inputFormHandler = this.inputFormHandler.bind(this);\r\n    }\r\n    inputFormHandler(e){\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n    render(){\r\n        return(\r\n            <article>\r\n                <h2>Update</h2>\r\n                <form\r\n                    action=\"/create-process\"\r\n                    method=\"post\"\r\n                    onSubmit={function(e){\r\n                        e.preventDefault();\r\n                        this.props.onSubmit(\r\n                            this.state.id,\r\n                            this.state.title,\r\n                            this.state.desc\r\n                        )\r\n                    }.bind(this)}\r\n                >\r\n                    <input type=\"hidden\" name=\"id\" value={this.state.id}></input>\r\n                    <p>\r\n                        <input \r\n                            type=\"text\" \r\n                            name=\"title\" \r\n                            placeholder=\"title\"\r\n                            value={this.state.title}\r\n                            onChange={this.inputFormHandler}    \r\n                        ></input>\r\n                    </p>\r\n                    <p>\r\n                        <textarea \r\n                            name=\"desc\" \r\n                            placeholder=\"description\"\r\n                            value={this.state.desc}\r\n                            onChange={this.inputFormHandler}\r\n                        ></textarea>\r\n                    </p>\r\n                    <p>\r\n                        <input \r\n                            type=\"submit\" \r\n                            value=\"update\"></input>\r\n                    </p>\r\n                    \r\n                </form>\r\n            </article>\r\n        )\r\n    }\r\n}\r\n\r\nexport default UpdateContent;","import React, { Component } from 'react';\r\n\r\n\r\nclass Subject extends Component {\r\n    render() {\r\n      return(\r\n        <header>\r\n          <h1>\r\n            <a href=\"/\" onClick={function(e){\r\n              e.preventDefault();\r\n              this.props.onChangePage();\r\n            }.bind(this)}>{this.props.title}</a>\r\n          </h1>\r\n          <p>{this.props.sub}</p>\r\n        </header>\r\n      )\r\n    }\r\n  }\r\n\r\n  export default Subject; ","import React, { Component } from 'react';\r\n\r\nclass Control extends Component {\r\n    render(){\r\n        return (\r\n            <ul className=\"control\">\r\n                <li>\r\n                    <a \r\n                        href=\"/create\"\r\n                        onClick={function(e){\r\n                            e.preventDefault();\r\n                            this.props.onChangeMode('create');\r\n                        }.bind(this)}    \r\n                    >create</a>\r\n                </li>\r\n                <li>\r\n                    <a \r\n                        href=\"/update\"\r\n                        onClick={function(e){\r\n                            e.preventDefault();\r\n                            this.props.onChangeMode('update');\r\n                        }.bind(this)}\r\n                    >update</a>\r\n                </li>\r\n                <li>\r\n                    <input \r\n                        type=\"button\"\r\n                        value=\"delete\"\r\n                        onClick={function(){\r\n                            this.props.onChangeMode('delete');\r\n                        }.bind(this)}     \r\n                    ></input>\r\n                </li>\r\n            </ul>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Control;","import React, { Component } from 'react';\nimport './App.css';\nimport TOC from './components/TOC';\nimport ReadContent from './components/ReadContent';\nimport CreateContent from './components/CreateContent';\nimport UpdateContent from './components/UpdateContent';\nimport Subject from './components/Subject';\nimport Control from './components/Control';\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.max_content_id = 3\n    this.state = {\n      mode: \"welcome\",\n      subject: {\n        title: \"WEB\",\n        sub: \"World Wide Web!\"\n      },\n      welcome: {title: \"Welcome\", desc: \"Hello, React!\"},\n      selected_content_id: null,\n      contents: [\n        {id: 1, title: \"Html\", desc: \"Html is for markup\"},\n        {id: 2, title: \"Css\", desc: \"Css is for style\"},\n        {id: 3, title: \"JavaScript\", desc: \"JavaScript is for interaction\"}\n      ]\n    }\n  }\n\n  getReadContent(){\n    let i;\n      for(i=0; i < this.state.contents.length; i++){\n        let data = this.state.contents[i];\n        if(data.id === this.state.selected_content_id){\n          return data\n        }\n      }\n  }\n\n  getContent(){\n    let _title, _desc, _article = null;\n    let mode = this.state.mode;\n\n    if(mode === \"welcome\"){ \n      _title = this.state.welcome.title;\n      _desc = this.state.welcome.desc;\n      _article = <ReadContent title={_title} desc={_desc}></ReadContent>\n    } else if(mode === \"read\"){\n      let _content = this.getReadContent();\n\n      _article = <ReadContent title={_content.title} desc={_content.desc}></ReadContent>\n    } else if(mode === 'create'){\n      _article = <CreateContent onSubmit={function(_title, _desc){\n        this.max_content_id = this.max_content_id + 1;\n        let _contents = Array.from(this.state.contents);\n        _contents.push({\n          id: this.max_content_id,\n          title: _title,\n          desc: _desc\n        })\n        this.setState({\n          contents: _contents,\n          mode: 'read',\n          selected_content_id: this.max_content_id\n        })\n      }.bind(this)}></CreateContent>\n    } else if(mode === 'update'){\n      let _content = this.getReadContent();\n      _article = <UpdateContent \n        data={_content}\n        onSubmit={function(_id, _title, _desc){\n          let _contents = Array.from(this.state.contents);\n          let i;\n          for(i=0; i < _contents.length; i++){\n            if(_id === _contents[i].id) {\n              _contents[i] = { id: _id, title: _title, desc: _desc}\n              break\n            }\n          }\n          this.setState({\n            contents: _contents,\n            mode: 'read'\n          })\n        }.bind(this)} \n      ></UpdateContent>\n    }\n    return _article\n  }\n\n  render(){\n    return(\n      <div className=\"App\">\n        <Subject \n          title= {this.state.subject.title} \n          sub= {this.state.subject.sub}\n          onChangePage= {function(){\n           this.setState({\n             mode: \"welcome\"\n           }) \n          }.bind(this)}\n          ></Subject>\n        <TOC \n          data={this.state.contents}\n          onChangePage={function(id){\n            this.setState({\n              mode: \"read\",\n              selected_content_id: Number(id)\n            })\n          }.bind(this)}  \n        ></TOC>\n        <Control\n          onChangeMode={function(_mode){\n            if(_mode === 'delete'){\n              if(window.confirm('정말 삭제할까요?')){\n                let i;\n                let _contents = Array.from(this.state.contents);\n                for(i=0; i<_contents.length; i++){\n                  if(_contents[i].id === this.state.selected_content_id){\n                    _contents.splice(i,1);\n                    break\n                  }\n                  this.setState({\n                    mode: 'welcome',\n                    contents: _contents\n                  })\n                }\n                alert('삭제완료!')\n              }\n            }else {\n              this.setState({\n                mode: _mode\n              })\n            }\n          }.bind(this)}\n        ></Control>\n        {this.getContent()}\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}